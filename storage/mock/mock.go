// Code generated by MockGen. DO NOT EDIT.
// Source: storage/storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	models "github.com/dilmurodov/online_banking/pkg/models"
	storage "github.com/dilmurodov/online_banking/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockStorageI is a mock of StorageI interface.
type MockStorageI struct {
	ctrl     *gomock.Controller
	recorder *MockStorageIMockRecorder
}

// MockStorageIMockRecorder is the mock recorder for MockStorageI.
type MockStorageIMockRecorder struct {
	mock *MockStorageI
}

// NewMockStorageI creates a new mock instance.
func NewMockStorageI(ctrl *gomock.Controller) *MockStorageI {
	mock := &MockStorageI{ctrl: ctrl}
	mock.recorder = &MockStorageIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageI) EXPECT() *MockStorageIMockRecorder {
	return m.recorder
}

// Account mocks base method.
func (m *MockStorageI) Account() storage.AccountRepoI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(storage.AccountRepoI)
	return ret0
}

// Account indicates an expected call of Account.
func (mr *MockStorageIMockRecorder) Account() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockStorageI)(nil).Account))
}

// CloseDB mocks base method.
func (m *MockStorageI) CloseDB() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseDB")
}

// CloseDB indicates an expected call of CloseDB.
func (mr *MockStorageIMockRecorder) CloseDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseDB", reflect.TypeOf((*MockStorageI)(nil).CloseDB))
}

// TxRepo mocks base method.
func (m *MockStorageI) TxRepo() storage.TxRepoI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxRepo")
	ret0, _ := ret[0].(storage.TxRepoI)
	return ret0
}

// TxRepo indicates an expected call of TxRepo.
func (mr *MockStorageIMockRecorder) TxRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxRepo", reflect.TypeOf((*MockStorageI)(nil).TxRepo))
}

// User mocks base method.
func (m *MockStorageI) User() storage.UserRepoI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(storage.UserRepoI)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockStorageIMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockStorageI)(nil).User))
}

// MockUserRepoI is a mock of UserRepoI interface.
type MockUserRepoI struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoIMockRecorder
}

// MockUserRepoIMockRecorder is the mock recorder for MockUserRepoI.
type MockUserRepoIMockRecorder struct {
	mock *MockUserRepoI
}

// NewMockUserRepoI creates a new mock instance.
func NewMockUserRepoI(ctrl *gomock.Controller) *MockUserRepoI {
	mock := &MockUserRepoI{ctrl: ctrl}
	mock.recorder = &MockUserRepoIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepoI) EXPECT() *MockUserRepoIMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepoI) CreateUser(arg0 context.Context, arg1 *models.CreateUserRequest) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoIMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepoI)(nil).CreateUser), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockUserRepoI) GetUserByID(arg0 context.Context, arg1 *models.GetUserByIDRequest) (*models.GetUserByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(*models.GetUserByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepoIMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepoI)(nil).GetUserByID), arg0, arg1)
}

// GetUserPasswordByPhone mocks base method.
func (m *MockUserRepoI) GetUserPasswordByPhone(ctx context.Context, phone string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPasswordByPhone", ctx, phone)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPasswordByPhone indicates an expected call of GetUserPasswordByPhone.
func (mr *MockUserRepoIMockRecorder) GetUserPasswordByPhone(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPasswordByPhone", reflect.TypeOf((*MockUserRepoI)(nil).GetUserPasswordByPhone), ctx, phone)
}

// MockAccountRepoI is a mock of AccountRepoI interface.
type MockAccountRepoI struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepoIMockRecorder
}

// MockAccountRepoIMockRecorder is the mock recorder for MockAccountRepoI.
type MockAccountRepoIMockRecorder struct {
	mock *MockAccountRepoI
}

// NewMockAccountRepoI creates a new mock instance.
func NewMockAccountRepoI(ctrl *gomock.Controller) *MockAccountRepoI {
	mock := &MockAccountRepoI{ctrl: ctrl}
	mock.recorder = &MockAccountRepoIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepoI) EXPECT() *MockAccountRepoIMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountRepoI) CreateAccount(arg0 context.Context, arg1 *models.CreateAccountRequest) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountRepoIMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountRepoI)(nil).CreateAccount), arg0, arg1)
}

// GetAccountByID mocks base method.
func (m *MockAccountRepoI) GetAccountByID(arg0 context.Context, arg1 *models.GetAccountByIDRequest) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", arg0, arg1)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockAccountRepoIMockRecorder) GetAccountByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockAccountRepoI)(nil).GetAccountByID), arg0, arg1)
}

// GetAccountsByUserID mocks base method.
func (m *MockAccountRepoI) GetAccountsByUserID(arg0 context.Context, arg1 *models.GetAccountsByUserIDRequest) (*models.GetAccountsByUserIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsByUserID", arg0, arg1)
	ret0, _ := ret[0].(*models.GetAccountsByUserIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsByUserID indicates an expected call of GetAccountsByUserID.
func (mr *MockAccountRepoIMockRecorder) GetAccountsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsByUserID", reflect.TypeOf((*MockAccountRepoI)(nil).GetAccountsByUserID), arg0, arg1)
}

// UpdateAccountBalance mocks base method.
func (m *MockAccountRepoI) UpdateAccountBalance(arg0 context.Context, arg1 *sql.Tx, arg2 *models.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountBalance", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountBalance indicates an expected call of UpdateAccountBalance.
func (mr *MockAccountRepoIMockRecorder) UpdateAccountBalance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountBalance", reflect.TypeOf((*MockAccountRepoI)(nil).UpdateAccountBalance), arg0, arg1, arg2)
}

// MockTxRepoI is a mock of TxRepoI interface.
type MockTxRepoI struct {
	ctrl     *gomock.Controller
	recorder *MockTxRepoIMockRecorder
}

// MockTxRepoIMockRecorder is the mock recorder for MockTxRepoI.
type MockTxRepoIMockRecorder struct {
	mock *MockTxRepoI
}

// NewMockTxRepoI creates a new mock instance.
func NewMockTxRepoI(ctrl *gomock.Controller) *MockTxRepoI {
	mock := &MockTxRepoI{ctrl: ctrl}
	mock.recorder = &MockTxRepoIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxRepoI) EXPECT() *MockTxRepoIMockRecorder {
	return m.recorder
}

// ApproveTransactions mocks base method.
func (m *MockTxRepoI) ApproveTransactions(ctx context.Context, tx *sql.Tx, req *models.ApproveTransactionsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveTransactions", ctx, tx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveTransactions indicates an expected call of ApproveTransactions.
func (mr *MockTxRepoIMockRecorder) ApproveTransactions(ctx, tx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveTransactions", reflect.TypeOf((*MockTxRepoI)(nil).ApproveTransactions), ctx, tx, req)
}

// BeginTx mocks base method.
func (m *MockTxRepoI) BeginTx(ctx context.Context) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockTxRepoIMockRecorder) BeginTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockTxRepoI)(nil).BeginTx), ctx)
}

// CreateTransaction mocks base method.
func (m *MockTxRepoI) CreateTransaction(ctx context.Context, tx *sql.Tx, transaction *models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, tx, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTxRepoIMockRecorder) CreateTransaction(ctx, tx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTxRepoI)(nil).CreateTransaction), ctx, tx, transaction)
}

// GetTransactionByID mocks base method.
func (m *MockTxRepoI) GetTransactionByID(ctx context.Context, req *models.GetTransactionByIDRequest) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", ctx, req)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MockTxRepoIMockRecorder) GetTransactionByID(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MockTxRepoI)(nil).GetTransactionByID), ctx, req)
}

// GetTransactionsByAccountID mocks base method.
func (m *MockTxRepoI) GetTransactionsByAccountID(ctx context.Context, req *models.GetTransactionsByAccountIDRequest) (*models.GetTransactionsByAccountIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByAccountID", ctx, req)
	ret0, _ := ret[0].(*models.GetTransactionsByAccountIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByAccountID indicates an expected call of GetTransactionsByAccountID.
func (mr *MockTxRepoIMockRecorder) GetTransactionsByAccountID(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByAccountID", reflect.TypeOf((*MockTxRepoI)(nil).GetTransactionsByAccountID), ctx, req)
}

// GetTransactionsByIDS mocks base method.
func (m *MockTxRepoI) GetTransactionsByIDS(ctx context.Context, req *models.GetTransactionsByIDSRequest) (*models.GetTransactionsByIDSResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByIDS", ctx, req)
	ret0, _ := ret[0].(*models.GetTransactionsByIDSResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByIDS indicates an expected call of GetTransactionsByIDS.
func (mr *MockTxRepoIMockRecorder) GetTransactionsByIDS(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByIDS", reflect.TypeOf((*MockTxRepoI)(nil).GetTransactionsByIDS), ctx, req)
}
